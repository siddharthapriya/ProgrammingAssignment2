demo()
h <- 30
h
q()
q()
clear()
help.start()
installed.packages()
clear()
q()
R.version
install.packages('DMwR')
installed.packages()
q()
install.packages ("swirl")
install.packages ("swirl")
install.packages ("swirl")
library(swirl)
swirl()
library(swirl)
swirl()
install_from_swirl("R Programming")
install_from_swirl ("R Programming")
swirl()
library(swirl)
swirl()
library(swirl)
swirl()
getwd()
getwd()
library(swirl)
swirl()
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep (NA, 1000)
my_data <- sample (c(y,z), 100)
my_na <- is.na (my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
q()
update swirl()
setwd("/media/siddhartha/01CEA0278C2F6C90/7_Coal India (2014-2015)/Coursera/R programming/Week 3/Assignment 2/ GitHub")
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {                          #set the value of the vector
x <<- y
m <<- NULL
}
get <- function() x                         # get the value of the vector
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector()
makeVector(10)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
set_inv <- function(solve) m <<- solve
get_inv <- function() inv
list(set = set, get = get, set_inv = set_inv, get_inv = get_inv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$get_inv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
m <- solve(data, ...)
x$set_inv(inv)
inv
}
makeCacheMatrix()
x <- matrix(1, 2, 3, 1)
x
x <- matrix(1, 2,)
x
x <- matrix(1, 2)
x
x <- matrix(1:4)
x
x <- matrix(1:4 nrow = 2, ncol = 2)
x <- matrix(1:4, nrow = 2, ncol = 2)
x
cacheSolve(x)
cacheSolve(x, ... = )
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
set_inv <- function(solve) m <<- solve
get_inv <- function() inv
list(set = set, get = get, set_inv = set_inv, get_inv = get_inv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$get_inv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
m <- solve(data, ...)
x$set_inv(inv)
inv
}
View(makeCacheMatrix)
View(cacheSolve)
